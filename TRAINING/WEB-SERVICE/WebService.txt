There are Server side and Client side
	Server side - DB, DAO,Businesss language , Service
	
	Client Side - Web Client  --> Sends WebPages --> Using -->Servlet JSP, Spring MVC, Struts, JSF
				- Application --> Sends Actual Data-->Using WebServices 1) SOAP 2)REST 3) AJAX --> it is explicitly for WebServer to Client
								 - csv, xml and json are pure text file, They are language free, it is just for transferring data.
				- Mobile Appl 
				- Machine

Loose-Coupling - Client side should not take care of whatever technology written in Server Side.				

CHALLENGES : - 
		1.  Exchange of Data in Common Format.
		2.  Intermediatory must be ubiqudious to platform of both sides.
		3.  Suppose in server side it is written in JAVA and client side it is fetching .Net so in Intermediatory
			it is receiving in one language and converting into another language. This is known aas Common Object
			Request Broking.
		4. To avoid Commone object reqeuest broking [CORBA] due to performance new concept convert JAVA object into XML Data, there are two component Binder which read the data from java object and supply to the parser,
			and Parser to convert xml to client side. [server side] 
		5. In the Client side, there is again two componenet, Binder and Parser. done the same thing. [Client side] 
		6. They have new componenet for binding and Parsing  known as JAXB [Java Exdended for Binding] and JAXP [Java Exdended for Parsing]
		7. There are one more arrangement in component section JAXM for different workload or payload for sending images etc.
		8. JAX WS[Java Exdended WebService] framework [API] is introduced to arrange all this thing which all the JAXB,JAXP and JAXM. We just have to call the method and it will send the 
		   data to the client .	
		9. In Servlet-JSP only the client send the reqeuest then only servlet JSP sends the response, it should not send by its own. If you want to
			send some alert message or something this can be done by WEB-SOCKET.


============================================================================================================================================================================================================
			HOW TO ACHIEVE THIS IN REAL PROJECT
============================================================================================================================================================================================================
	
	PROJECT : WebService_010_Basic
	-> Create a JAVA Project
	-> Create DAO, Interface, exception, utitlites and services.
	-> Now we are adding WebServices here, for thsi open ServiceEmployeImpl add simple service and test if it is working or not.
	-> Add one method and impl and interface
	-> create one websoap interface class and add that method.
	-> On Interface add @WebService and @SOAPBinding(style=Style.DOCUMENT)
	-> Create soap implementation of websoap.
			on class @WebService(endpointInterface="com.jp.hr.interfaces.EmpSoapServices")
			--> create constructor 
				-- create object of serviceEmployeeImpl
				-- call that method
	--> Create publish employee service class
	
	Creating Client PRoject 
	PROJECT : WebService_010_Basic_CLIENT
		--> Copy Interface of EmpSoapServices and exception package 
		--> create client class to process the data 
		--> Copy URL and change the url as per we test in the above project
		--> Change the qName as the targetnamespace of wsdl i.e. http://soap.hr.jp.com/ and name = "EmpSoapServiceImplService" given in wsdl
		--> Create EmpSoapServices object and call method getPort(EmpSoapServices.class)
		--> call the reference.getTestInteger(10) method created in EmployeeServiceImpl
		--> Execute it 
		--> Now interact with DAO Layer.
		--> Copy one method from EmployeeService layer to EmpSoapService Interface and implement it.
		--> After implementation you will get error about Entity Class, Copy the entity from server project and pste it in client projct.
		--> Run the Publish class from Server project, check whether new method is appeared in wsdl.
		-> Execute the Client Main method.
		--> Same way add methods .
		
	Now creating a service layer at Client side , For this we have to create one Interface named FinnancialServices in com.jp.fin.services, create Exeption class
	Add Implementation of FinanacialServiceImpl
	
	steps by steps :
		--> Initially we write the Soapservices URL, qname and service creation in main method which is visible to client.
		--> Then we have moved to FinancialSErviceImpl class that 4 lines and in main method create the object to call the method.
		--> Then we have remove the 4 lines of code and implmented in LocatorServices which handled soapServices and call that method in FinancialServiceImpl
		
		
		
		
		
		REST V/S SOAP
			REST gives you actual data in form of JSON format.
			SOAP gives you entire structure from that you have to fetch data.
			REST is faster than SOAP.
		