==SERVLET==
FORWARD DISPATCHING IN JSP
	-RequestDispatcher dispatch = request.getRequestDispatcher("/process2");
    	dispatch.forward(request, response); 


INCLUDE DISPATCHING IN JSP
	-In welcome.jsp we have to add the <jsp:include page="/jsps/Head.jsp"></jsp:include> and comment or cut <h1>Welcome to the jp morgan</h1>. Here we can dispatched multiple jsps.
	- For this, we have to create Head.jsp and PageHead.jsp and put <h1>Welcome to the jp morgan</h1> tag in Head.jsp and in PageHead.jsp put <h3>Welcome to the site</h3>
	
Note: 1.Include Dispatching response are not wipe out, but in forward dispatching its wipe out.
	  2.Include Dispatching can be used in Servlet also.  	
	  

CONFIGURATION ON SERVLET - xml approach
		- Dont used constructor in Servlet, if you want to used to initialise used init method.
		- In Servlet server create an object if you dont used constructor over here server will create compiler will create an no arg constructor.
		- Use only doGet method
		- comment annotation - examples - //@WebServlet("/process1")
		- open web.xml remove all welcome-file-file tag.
		- <servlet-name> - Canonical name. This xm uses this name internally to mapp with servlet mapping tags. The servlet-name of servlet-mapping must be same as servlet-name of servlet tag. please check the below tags
	=====================================================================================================================================		
				<servlet>
					<servlet-name>p1</servlet-name>
					<servlet-class>com.jp.config.servlets.Process1</servlet-class> 
				</servlet>
			 
				<servlet-mapping>
					<servlet-name>p1</servlet-name>
					<url-pattern>/process1</url-pattern>
				</servlet-mapping>
	=====================================================================================================================================
		- Add the servlet into server and Restart the server.
		- Run it.
		
		- Now uncomment the annotation and start the server and execute it, it will throw error with tomcat encountered problem.
		- change the annotation process2 and do the same. it will work fine. and once you give process2 instead process1 in the url, you will get two urls are same server.
	Adding multiple URLs in xml
		- You can add one more servlet mapping tags and change url pattern process2 , now you can get two urls on same server.	Below are the examples
			
				<servlet-mapping>
					<servlet-name>p1</servlet-name>
					<url-pattern>/process1</url-pattern>
				</servlet-mapping>		 
		 
				<servlet-mapping>
					<servlet-name>p1</servlet-name>
					<url-pattern>/process2</url-pattern>
				</servlet-mapping>
	Adding multiple URLs in annotations
		- you can add multiple url in annotation - by simply writing  @WebServlet(urlPatterns={"/process2", "/process1","/process3"})
		- Comment the xml servlet mapping tags
		
=====================================================================================================================================
		CONTEXT PARAMTERS IN SERVLET :
			-Add the below path in web.xml
				<context-param>
					<param-name>CompanyName</param-name>
					<param-value>J P Morgan Chase</param-value> 	
				</context-param>
			- add the below code in servlet in doGet method
				ServletContext ctx = super.getServletContext();		
				System.out.println(ctx.getInitParameter("CompanyName"));
				
				
	Note: Declaring context parameters through Annotations. They are to be declared on the listener or Filter.	
	Note : Declaring 
 paramters : They are private to the servlets . They are not accesible to another servlets
=====================================================================================================================================		
		
		CONTEXT PARAMTERS IN JSP : using xml
			-Add the below path in web.xml
				<context-param>
					<param-name>CompanyName</param-name>
					<param-value>J P Morgan Chase</param-value> 	
				</context-param>
			
			- Create jsps folder WEB-INF and create new jsp file. For jsp to run dont keep jsp file under WEB-INF folder. keep outside
			- add the below code in servlet in doGet method
				ServletContext ctx = super.getServletContext();		
				System.out.println(ctx.getInitParameter("CompanyName"));
				
=====================================================================================================================================
	Declaring config paramters : They are private to the servlets . They are not accesible to another servlets
	
	-- Config in Servlets
	
	@WebServlet(urlPatterns={"/process2", "/process1"}, 
	initParams={@WebInitParam(name="pageHead",value="Employee List"), @WebInitParam(name="FootHead",value="Contact Details")})
		To access please use 
			// Accessing Config
		ServletConfig cfg = super.getServletConfig();
		System.out.println(cfg.getInitParameter("pageHead"));
		System.out.println(cfg.getInitParameter("footHead"));
	
	Note : for the config parameters you have keep xml mapping tag comments if still you want to run then url- pattern must be different
	
=====================================================================================================================================

	-- Config in XMLs
			
			 <servlet>
				<servlet-name>p2</servlet-name>
				<servlet-class>com.jp.config.servlets.Process2</servlet-class>
				<init-param>
					<param-name>PageHead</param-name>
					<param-value>Employee List</param-value>
				</init-param>
		  </servlet>
		  
		  Add the below code in doGet method
			ServletConfig cfg = super.getServletConfig();
			System.out.println(cfg.getInitParameter("PageHead"));

=====================================================================================================================================
Servlet Context v/s Servlet Config
	1. Servlet Context holds configuration data Servlet config holds private data
	2. Servlet Context provides access to server side resources/services. [eg : Servlet Context can provide access to the file . you can read that pdf file and provide parameters to other servlet method.]
	3. Servlet Context can also provide public storage area.
	4. It can get list of other servlet methods.	
=====================================================================================================================================	
	===> LOAD ON STARTUP


=====================================================================================================================================
	===> COOKIES
		- Cookies is the storage in the user machine.
		- This storage is controlled by Browser.
		- Servlet also can creat the cookie and send those cookie along with the response to the browser and Browser will store those cookies.
		- And within next request from browser those cookie will added and come back to the server.
		- Cookie will work with pair between request -response.
		- Cookie is the class given in the servlet where this information you can put and hold this class can only text information. 
		- Cookie can hold text only.
		- Per Cookie can hold max. 4 MB of text information.
		- Cookie cannot hold virus, becuase virus hold executable information and cookie can hold information.
		- For one website max. 20 cookies browser can maintain.
		- Overall maximum 300 cookies a browser can maintain.
	
	<#> TWO TYPE OF COOKIES
		--> Persistant Cookies 
		- The Cookies for whom age is set.
		- Those cookies are set on the disk(Client Side).
		- If you abrupdtly close the browser it will still store on the disk
		
		--> Session Cookies
		- The Cookies for whom age is not set.
		- Those cookies are store in the RAM.
		- If you abrupdtly close the browser the cookie will get lost the data.
		
=====================================================================================================================================
												DAO - CONCEPTS
=====================================================================================================================================
	WHY WE USE DAO:
		- DAO brings the data from database.
		- Servlets needs processed data. 
		- DAO doesnot provides processed data. [DAO is dependent on DB] 
		- There might be multiple DAO classes.
		- Business layer will provide process data. [Business layer have a reference of DAO Class] 
		- There might multiple Business layer classes.
		- Service layer has single class which have a reference of Business Layers. 
		- Client have reference of Servvice layer and call leave method. 
		- All client will refer to one Service class and service class will call different methods in Business layer
		- Here servlet is the Client assuming.

=====================================================================================================================================	
								CREATING DAO CLASS CONCEPTS WITH SERVICE LAYER
=====================================================================================================================================	
		SERVLET - CLIENT FOR YOUR CORE
		package : com.jp.hr.daos
		DaoEmployee - Note : None of this method will raised SQLException. None of the method will return resultset
			Java object class
			
		package : com.jp.hr.entities
		JAVA/ entity class - Employee
			- defined  private int empId, private string firstName, private lastName;
			- define construtor both
			- Getter Setter
			- toString() - To tell the content of the object
		
		Exception Class
			- package - com.jp.hr.exceptions
			-SuperClass - java.lang.Exception
			- Call constructor with parameter and 
			
		- Now go to DAO class and create arraysList of Employee class and get HrException in it
		
		- Implementation Class
			package : com.jp.hr.daos
			IMPLEMENTATION -DaoEmployeeImpl Class 
				Methods
					-- Write Connection method in this .
						Note : The ClassNotException, SQLException must not come of DAO Class . If you call the connection inside DAO, then you can add throws class inside of try catch
						
				Exception chaining : you have add e parameter when you throw new hrexception class
				
		Implementation class ready by writing Connection, clossing connection and calling method
		
		
		INTERFACE for Service Class - ServiceEmployee
			package : - com.jp.hr.services;
			Service layer have to call method on DAO
			We have to create the object of DAO inside the construtor, beucase constructor will executed once and that dao object will create once .
			As you cannot create object of DAO (DaoEmployee) as DAO is an Interface so we have to create the object of Implemented class (DaoEmployeeImpl);
			
			
			
																			PACKAGE
			1. DaoEmployee [INTERFACE]       						package com.jp.hr.daos;
			2. Employee  [OBJECT CLASS / ENTITY]					package com.jp.hr.entities; 	
			3. HrException [EXCEPTION CLASS] 						package com.jp.hr.exceptions;
			4. DaoEmployeeImpl [IMPLEMENTATION OF INTERFACE]		package com.jp.hr.daos;
			5. ServiceEmployee [INTERFACE]							package com.jp.hr.services;
			6. ServiceEmployeeImpl [IMPLEMENTATION]					package com.jp.hr.services;
			7. Create Servlet Class									package com.jp.hr.servlets;
			
				Create Object of DAO in Servlet by initialising init() method because if you create objecti in doGet and doPost then i will create object again agian due to doGet and doPost method called multiple times.
				DAO is the stateless object it need created only once.	
				
				
		<#> If you want to put data on jsp then you have put to data on request, dispatcher is only to give control
		
		
ASSIGNMENT : 1. CREATE TABLE FOR THE BELOW CREATE PRODUCT ID , PRODUCT NAME , PRODUT CATEGORY AND PRICE,
			 2. ADD 6 RECORDS INSIDE IT AND DO THE SAME WHICH WE HAVE DONE IN THE FOR DATABASE.	
===============================================================================================================================================================
				<#><#><#><#> RULES AND REGULATION FOR DAO <#><#><#>
===============================================================================================================================================================
		* The ClassNotException, SQLException must not come of DAO Class
		* The database specific entities must not come out of the class(Like Exception)
		* Each and every resource (Connection, Statement , Resultset) must be closed properly
		* Always prefer statement over PreparedStament for non-interactive queries. [eg .select * from employees is the non -interactive query]
		* Fetch the data page wise.
		* Prefer mentioning column names instead of column position in getXXX() methods.
		
===============================================================================================================================================================		
===============================================================================================================================================================
				<#><#><#><#> RULES AND REGULATION FOR SERVICES LAYER <#><#><#>
===============================================================================================================================================================
		*	One layer refers to another layer through interface only.
		*	Implementation of the business rule should be done here in absence of BL layer.
		*	This layer will also ensures only custom exception to come out

		Features of Services layer: 	
			* Only one gateway with preserving privacy of all inner classes.
			* One point for implementing security, transaction managemetn, caching.
			* Multiple interfaces per client to give restricted view of all services.
			* Facade pattern(GoF pattern - Gang of Four).
			* DAO is a JEE pattern.
			* Implemented singleton by creating single object of outermost class.
			* Delegates and controls Cross Cutting Concerns.
===============================================================================================================================================================
				<#><#><#><#> RULES AND REGULATION FOR FRONT CONTROLLER LAYER <#><#><#>
===============================================================================================================================================================
		* Front Controller is A JEE design pattern.
		* Command pattern (GoF pattern).
		
		
===============================================================================================================================================================
													INTRODUCTION TO JSP
===============================================================================================================================================================
		* You cannot override method start with _methodname().
		* You can write JAVA code in JSP. HTML can executed in client side, but JSP can executed in server. 
		* JSP is java embedded in HTML. Why we need this - to Dynamism. 
			-- Client side dynamism by JavaScript.
			-- Server side dynamism by JAVA.
			-- JSP can go with : JavaScript, JQuery, Sprite.
			
	<#> COMPONENTS:
			
			* HTML : html template
			
			* Scriptlet : <% java code embedded inside this comment %> goes into service method of Servlet in the order of thier mention(procedurely). 
			
			* DIRECTIVES :There are three directives :-> PAGE, INCLUDE, TAGLIB.
				page directives : Submit the metadata for the page. <%@ page directives mentioned under this symbol %> . We will attribute such as Session , isErrorPage, errorPage, extends.
				include directives : Pre-compiled inclusion of JSP Code.
				taglib directives : to define jstl for Library.
			
			* Expresssion Language : $ {}  -- 
			
			* Standard tag Library :	
					* Library of java code with methods.
					* Methods are called through Markup Language syntax 
						
			
			* DECLARATIONS : <%! Instance fields, overide, init()/destroy(), define custom methods %>
			
			* EXPRESSION : <%=Math expression/method returning a value %> -- you cant call void method.
			
			* JSP elements : <jsp:xxx/> include
	===============================================================================================================================================================
			-- SHOWING EMPLOYEE DETAILS ON VIEW LINK
	===============================================================================================================================================================
		Steps :
			1. create getEmployeeDetails by passing int empId in interface
			2. create the implementation of this
			3. Copy the Dao interface and copy in the service interface
			4. implment the method by writing the return .
			5. In front controller add the switch case empDetials 	
			6. Fabiricate the url dymanically. [ empDetails.do?id=x]
			 
			
	JSPs steps to follow while doing practice : 
	In Emplist.jsp
		1 : Please uncommnet and use

		<!-- 1. This is the first thing you have to comment up part  --> 
		 <%-- 	<%	for (Employee emp :(ArrayList<Employee>)request.getAttribute("empList")) {
		 		
		 	
		 	%>
		 <tr>
		 	<td><%=emp.getEmpId()%></td>
		 	<td><%=emp.getFirstName()%></td>
		 	<td><%=emp.getLastName()%></td>		 	
		 </tr>
		 <%}%> --%>
====================================================================================================================================================		 
		 
		2. By using JSTL 

	<!--This give jstl for employee mentioned below  -->
	<!--  	<tr>
	 		<th>Employee Id</th>
	 		<th>First Name</th>
	 		<th>Last Name</th>
		 </tr> -->
		<%--  <c:forEach items="${ requestScope.empList}" var="emp">
		 	<tr>
		 	 	<td>${emp.empId}</td>  <!-- this property empId will call getEmpId -->
		 		<td>${emp.firstName}</td>
		 		<td>${emp.lastName}</td>
		 	</tr>	
		 </c:forEach> --%>		
====================================================================================================================================================
	3. You will employee id and clicking on employee id you will get the details
	
	<!--This give jstl for employee details link below  this shows once you click on the view details link you will get the output -->
 
			 	<tr>
			 		<th>Employee Id</th>
			 		<th>View Details</th>			 		
			 	</tr>
			 	
			 	<c:forEach items="${ requestScope.empList}" var="emp">
		 	<tr>
		 	 	<td>${emp.empId}</td>  <!-- this property empId will call getEmpId -->
		 		<td><a href=""></a></td>  == Here in this href tag you have to use 6 steps fabricated for example : empDetails.do?id=x but intead of x enter empId
		 		
		 	</tr>	
		 </c:forEach>
====================================================================================================================================================

	===============================================================================================================================================================
			-- INSERTING RECORDS INTO EMPLOYEE - DML OPERATION
	===============================================================================================================================================================
	
	1. Add one more method in DAO INTERFACE -- public boolean insertNewRecord(Employee emp) throws HrException;
	2. Implement the DAO Interface -- Implement the above method . Before that create one Emp_details table.
	3. Add one more method in SERvice interface -- give some understandable name as client can understand -- public boolean addNewEmployee(Employee emp) throws HrException;
	4. Implemnent the Service interface
	5. In frontcontroller add more switch newJoining
	6. Create NewJoinee.jsp and create a form to submit employee.
	7. Implemnet the logic of form in frontcontroller  in switch case
	8. If it sucessfull, then show the message in NewJoinee.jsp
	
	To show two hyperlinks in jsp add new jsp main menu and add hyperlinks
	
	9. Add switch case in frontcontroller mainMenu which show both link add new employee and view employee details.
	10 Add this tag in web.xml --> <welcome-file>/mainMain.do</welcome-file> remove all welcome-file 
	
	
	===============================================================================================================================================================
															COOKIES
	===============================================================================================================================================================
	===> COOKIES
		- Cookies is the storage in the user machine.
		- This storage is controlled by Browser.
		- Servlet also can creat the cookie and send those cookie along with the response to the browser and Browser will store those cookies.
		- And within next request from browser those cookie will added and come back to the server.
		- Cookie will work with pair between request -response.
		- Cookie is the class given in the servlet where this information you can put and hold this class can only text information. 
		- Cookie can hold text only.
		- Per Cookie can hold max. 4 MB of text information.
		- Cookie cannot hold virus, becuase virus hold executable information and cookie can hold information.
		- For one website max. 20 cookies browser can maintain.
		- Overall maximum 300 cookies a browser can maintain.
	
	<#> TWO TYPE OF COOKIES
		--> Persistant Cookies 
		- The Cookies for whom age is set.
		- Those cookies are set on the disk(Client Side).
		- If you abrupdtly close the browser it will still store on the disk
		- Even you closed browser they held on disk until they expired. They have age.
		
		--> Session Cookies
		- The Cookies for whom age is not set.
		- Those cookies are store in the RAM.
		- If you abrupdtly close the browser the cookie will get lost the data.
		- Once you browser gone cookies get lost.
	===============================================================================================================================================================
		==> CREATING SERVLET COOKIES 
	===============================================================================================================================================================
		- SESSION COOKIE
		- PERSISTENT COOKIE
		
		Steps:
			-> Create a Servlet which create two instances of cookies one is for persistent and other for session.
			-> Create another servlet which call this cookie.
	
	===============================================================================================================================================================
	 == > Create cookies with JSP
	=============================================================================================================================================================== 
	 1. Create jsp with Welcome.jsp with checkbox and hyperlink, once you click on hyerlink it will send me to the menu page.
	 2. create menu page once .
	 3. Once you click checkbox it should store in somewhere, then second time i visit if there is checkbox cookies it should get me to menu page no welcome page
	 4. No Cookie it should show me Welcome page. If there is cookies it should get me directly to menu page.
	 5. Create FrontController servlet.
	 For this we have to create two jsps MainMenu and Welcome.
	===============================================================================================================================================================	 
							SESSION
	===============================================================================================================================================================	 
	1. On request setAttribute() and to get the data getAttribute()
	2. For SessionScope you have to start session . you dont get it by default. 
		- To start the session means to create the seperate memory space - Session memory space
		- Command HttpSession session = request.getSession();
		- Session request can hold any java object. In Key value pair it can store name and object value reference.
	Benefits:
		- The benefits is the request data can hold that data beyond the lifecyle of request while using session. 
		- HTTP protocols is highly scalable becuase it is stateless. means once you get request response the conection get lost , so other can use it.
		- There is one problem Server doest not know whether the request is coming from user1 or user2 or user3 as mulitiple user are sending request in the fraction of time.
		- The above problem can be solve by using Token [User Specific], sending some unique identifier.
		- When user 1 create[ start a session ]  a session, space is allocated to hime even token is allcoated to him. When user send some data that data will go into his space.
			For this we hve to two things 
				1. Unique Identity code	
				2. Space
		- When we start a session it will crate a unique id called Session ID. We just take care of when to start the session and stop the session, the moment user logged out, the id and space will get lost.
		- We have to create Session id in Servlet, but in jsp it does not wait for user to create a session id, by defaul jsp is creating it.
		- We are sending data via Cookies, Header and Webpage.
		
		
		
	===============================================================================================================================================================
	 == > Create Session using Servlet
	=============================================================================================================================================================== 
		- Need to create two servlet.
				- Afterlogin Servlet , No need of constructor 
				- Create MainMenu.jsp in this we have to print session.id which we create in Afterlogin servlet
				- Create Logout servlet we have to drop or delete sesion.
				
			<#> How it works , once you create a session , the control request is send to the jsp via dispatch and then you will able to see in MainMenu.jsp and from jsp response is send to logout.
				In Logout once you will invalidate the session will drop.
				
		===============================================================================================================================================================
				CREATE SESSION WITH PREVIOUS EMPOYE DAO PROJECT 
		===============================================================================================================================================================
			->In Frontcontroller create two case home and login for that we have to create two jsp.
					-We are creating new Home.jsp On this Home.jsp In that jsp we have to crate login hyperlink button
					- Create Login.jsp whre user name password and submit button
					- In Web.xml put "/home.do"
					- In Home put href as login.do once you click on link it will navigate to login page.
					- Once you have entered login page credential it will call autenticate.do which call authenticate case.
					- Create a HttpSession session line, in FrontController so that we can specify the UserFullname all the jsps.
					- So in jsps we have entered Welcome Mr./Ms. ${ sessionScope.userFullName } after body tag so that it will show to all jsps.
					- Create logout case where you create http session line and where you hve to show the Thank you username in thankspage.jsp page
					
			--> Here we have created 9 jsps where we have added 
			
					- Create new class name as Factory class whree every object is created here such as  DAo object, service object
					
					
					Assignments : 
						--> The same thing we have to do it product
						--> In this we have to not used delete and edit but view and add to cart.
						--> once you have added to cart and it should show as product id and quantity.
						--> After this, we have insert this in table. which show product id and quantity.
					
===============================================================================================================================================================		
	HOW TO CREATE SINGLETON FACTORY
===============================================================================================================================================================
	1. New JAVA PRoject not Dynamic Web Project
	2.Declare self reference as static and private 
	3.Singleton01 class where constructor is private , nobody can create object from outside class .
	4.create static public method to create restricted number of instances where return type is reference of Singleton01. 
	5. Why do we need the above method as static
	
===============================================================================================================================================================		
	HOW TO CREATE SINGLETON FACTORY WITH FACTORY OBJECT ALL TOGETHER 
===============================================================================================================================================================

	-- Create Web Dynamic PROJECT - JPM_100_ConPool_Excep_Validations
	-- Copy src and WEB-INF of JPM_080_Layer  and paste into JPM_100_ConPool_Excep_Validations
	-- Check all the systems you have copy it is working fine or not.
	-- now open ConnectionFactory and create singleton , now you got what to do 
		1. eclare self reference as static and private 
		2.Singleton01 class where constructor is private , nobody can create object from outside class .
		3.create static public method to create restricted number of instances where return type is reference of Singleton01.
		4. I can create one connection but for connection pool i want to crate more than one connection but restricted connection.
			--> We have done with Factory with SingleTon and we check it is working fine.
			--> now Connection pooling we have to search in google for tomcat 8.5 in tomcat webpage that oracle 8i,9i link
					1. Context configuration - This configuration you have to twig and place in server.xml under resource tag line no. 39
						<Resource name="jdbc/myoracle" auth="Container"
						type="javax.sql.DataSource" 
						driverClassName="oracle.jdbc.OracleDriver"
						url="jdbc:oracle:thin:@127.0.0.1:1521:orcl"
						username="hr" 
						password="hr" 
						maxTotal="3" 
						maxIdle="1"
						maxWaitMillis="-1"/>
						
					2. web.xml configuration - This configuration you have place in web.xml save as datasource object
						<resource-ref>
							<description>Oracle Datasource example</description>
							<res-ref-name>jdbc/myoracle</res-ref-name>
							<res-type>javax.sql.DataSource</res-type>
							<res-auth>Container</res-auth>
						</resource-ref>

					3. Code example
						Context initContext = new InitialContext();
						Context envContext  = (Context)initContext.lookup("java:/comp/env");
						DataSource ds = (DataSource)envContext.lookup("jdbc/myoracle");
						
						The first three line you have to copy and in ConnectionFactory class for tomcat you have to paste it
					
	We have created the earlier factory for Connection Oracle Data Source  and now you have created Connection factory for Tomcat
		-- > For ConnectionFactoryTomcat we have to do same thing as it is done for singleton(Connection factory for oracle)
		Now in DAO EmployeeImplementation class we have to create a factory object of Tomcat instead of Connection Oracle data becuase for connection pooling.
		and call the getconnection().
		
		-> After run you will get error that no sql issue becuase context is not getting, so the above you have added in server.xml line no.39 remove it and add in context.xml file
		
		ASSIGNMENT :--
======================================================================================================================================================================
		Create User details Dao
			return userid, user name . if you have 
			from dao it will reache to service layer.
			
			user login and in authenticate logic will go to Business Layer but not it is in service layer. And in service layer you will pass unamd and password will send to Dao and in return 
			it will send to service and in authentical.
			Same as Empdetails but in this case authenticate switch will call service layer and in service layer all this if else condition will satisfy.
======================================================================================================================================================================		
						
======================================================================================================================================================================		
						SHOW EXCEPTION ERROR IN JSP - Those error wil able to display in jsp 
======================================================================================================================================================================		
							1 CREATE error.jsp file and write <h2><%=exception.getMessage() %></h2>.
							2. At the top  write <%@ page isErrorPage="true" %>  
							3. In Frontcontroller in catch clause write 
								request.setAttribute("exception", e);	
								jspName = "Errors";
							4. Now do some mistak in dao or frontcontroller class you will get jsp print as a error
							
======================================================================================================================================================================		
												FILTERS
======================================================================================================================================================================								
			-> SElect filter after creating servlet class in the use request dispatcher in url pattern
			- loadOnStartup in servlet means it will load servlet on loading the server
			- Fitler is used to intercept the message to servlet.
			- When reqeeust is going to servlet filter will check whether this user is entitled with servlet to check security. 
				In ModifyResponse before chain.doFitler(request,response) line we will check for the security and it is good the the it will send to the servlet as a request and response is coming back.
				
======================================================================================================================================================================
												LISTENER
======================================================================================================================================================================
		-> One Event is created listener occured. eg : When session is created listener occurred, when session is destroy listner will occurred, such kind of event is created listener is occurred.
		- > Create Listener for this , Go to Dynamic Web Project -> Select Http -> lifecycle [Listener name = CountForLiveSessions]
		-> Create servlet. [servlet name = BeginSession.]
	
	Methods in Session : 
			--> getSession()/ getSession(true) ; If session exists :Bring the reference of session Otherwise create new session.
			--> getSession(false) : If session exists : Bring the reference of session otherwise return null.
			Create one jsp and in that jsp give hyper link logout 
			Crate Logout servlet.
			
			Order Listener -> Filter -> Servlet
			
======================================================================================================================================================================			
												SUMMARY
======================================================================================================================================================================
Servlet LifeCycle	
	--> Session are user specific.
	--> Dont use init with parameter for overriding, Alwyas use init without parameter for overriding.
	--> Deployment lifecycle for java code-  Servlet can convert it into .class by ecplispe editor. it is package into war file and this war(Web Archive) is copied into webapp folder.
	--> jar (java archive)
	--> war (Web archive)
	--> ear (Enterprise archive ) Java archive + Web archive 
	--> When war file is deployed the server monitoring web app folder if it found it will unzip that archive and start deployement. It goes into .class folder create servlet then it goes into jsps folder and that jsps get deployed.
	--> The order of deployement is decide by LoadonStartup. you have to give it by order 1,2,3...
	--> In Servet it moniter the timestampd of .class file
	
Jsp LifeCycle
	--> It moniter the timestamp of .jsp
	--> The change the size of heap memory (JVM) extended max.
	--> jsp is converted into java and java is tramissted in .class.
	
GET Parameter Request:
	- Which checks the form is of form or query string.
	- There is only get method not set method.
	- If you want to send the parameters to the client(browser), cookie is one way which transfer data to the browser.
	- request.getCookies you will get the data.
	- setAttribute - It is used to transfer the data from one server component to another server component. Servlet, JSP are servers compoment.
	- There is only way to send response to the client is Cookies. 
	- getParameter - To get the data from the client.
	- Cookies - to Send the data to the client.

Scope :
		- page Scope : Smallest scope. Alternative to page is this. 
writable scope	- requestScope : 
writable scope	- sessionScope : UserFullname is stored in SessionScope. Cart can be placed in session.
writable scope	-applicationScope : List (The data of usernames ) is placed in applicationScope.Reference of servlet can hold in applicationScope(context).

ContextParameter: 
		- The data place as context Parameter is accessible to all. 
		- Context is created per application.
		- Context is created in web-xml.

Config Parameter : 
		- The configuration is accessible to per servlet. 
		- No accessible to another servlet but context data is accessible to every servlets.
		- Config is created per servlet.
		- Config is created in initparams.

Page Include and Dispatching:		
	- Page Include :
					- Page include is compile time.
					
	- Dispatching  : 
					- Dispatching is Run time. 
					Forward dispatching - It is used to form the chain. 
										- Request object is not wipe out, but response object is wipe out.
					Include dispatching - Accumulating the responses from jsp and appending to the response object. Responses are generated by jsp at runtime.

Re-direction :
				- Redirection created at the server side and acted at the client side. Actual web page is brought from different web page.

==> When to used Re-direction or when to used Dispatching
	- From one project you cannot do dispatching to another project. You can do dispatching within the project.
	- Within the application you can do dispatching.
	- From one server to another server you can use re-direct. One applcaiton to another application you can used re-direction.
	- Dispatching is faster than re-direct.
	
SESSION MANAGEMENT :
		1. http is the stateless protocol.
		2. tcp/ip may not be stateless.
		3. Session management is doing two things:
				i) whenever you start the session it will create the unique id and passing the response to the user,
				ii) Three ways
					a) Cookies - Session internaly manage the cookie.
					b) Url rewriting - Whenever some realize someone block hte cookie, session id is visible when user click the btn the session id comes back.
									 - you have to call that method , session id get appended.	
					c) Hidden field : This is not been used.
		4. On JSP session is bydefault existed.  If it doesnot find the session it will create it.
		5. On servlet session is bydefault doest not existed. 
	
	<#> SESSION TIMEOUT :
				--> When User doesnot interact with page, after some time it automatically destroy the session and destroy the space allocated to session.
						-- It does not wait becuase of security reason.
						-- By default 30 mins timeout is declared after 30 mins session will be destroy.
						-- If session is null, it will direct to the login page.
						-- if you want to change the timeout to 10 mins you have to add configuration in web.xml.
						-- In payment gateway the sesssion time is of 2 mins, there is one method setMaxInActiveInterval() which overrides the session timeout for 2 mins.
					
	Page Context : Instead of mentioning all the parameters for passing from code to another code, you can used page context where you can pas on parameter.				
						
======================================================================================================================================================================
								ARCHITECTURE
======================================================================================================================================================================
1. We create DAO Layer - For interacting with DataBase , for different database we have create different DAOs.
2. What is use of DAO Layer - Loose Coupling.
3. From the frontcontroller you can refer to Service layer.
4. We design frontcontroller, which uses multiple request. On the basis of the command we call differnt action, behind the frontcontroller, there is switch and in swtich there are jsp and jsp wil decide the page.
5. Actual presentation are done through jsp.
6. update query command :
update "HR"."EMP_DETAILS" set "LAST_NAME"='Chaudhari' where "EMPLOYEE_ID"=101 and "FIRST_NAME"='Darsh' and "LAST_NAME"='Chaudhr'; 


select * from EMP_DETAILS;

create sequence seqEmployee_id start with 8 increment by 1 NOCACHE; 

drop sequence seqEmployee_id;
select seqEmployee_id.nextval from dual;

======================================================================================================================================================================
								SECURITY
======================================================================================================================================================================
	1. User Authentication
	2. Encrypt and decrypt
	3. Malicious 