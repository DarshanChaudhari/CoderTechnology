
IMPORTANT
==========================================================================================
@Component 
	-> @Service -> For Service Layer
	-> @Repository -> DAO Layer
	-> @Controller -> Controller Layer
	-> @RestController-> For REST Controller
==========================================================================================

IMPORTANT
==========================================================================================
ApplicationContext -> ?
context -> ?
If you have to inject a reference one is @Autowired , @Resource, @Inject
@Autowired - IT will searched the type of bean , if it found it will inject the reference.
So better go by name not by type , by Name as @Qualifier


Ther are five configuration to explore a Spring
1. Xml configuration
2. Annotation Configuration
3. JAVA Configurations
4. Creating Bean through JAVA Code.


@persistanceContext - It is only work for entityManager.It is JPA Configuration not Spring configuration. Spring has given a support.
==========================================================================================

==> Dependency Injection
==> Constructor Injection -->	Priority 2
==> Setter Injection      -->	Priority 1
==> Field Injection		  -->	Priority 3

==> Interception
		--It is used for Security/Authorization, Transaction Management and Logging . It is hidden from client , when you are calling some method say abc(), there is some methods which 
			get called before a() and after b() when client called method abc().

==> Aspect Oriented Programming [AOP]
		--> Advice/ Aspect -- Means Intercepting code [Before and after part]	
		--> Join Points	   -- Target Method	 	
		--> PointCuts     -- It is defined on Advices to decide the JoinPoint [target]
		
	<#> Policy 1 : Compile Time Weaving - Special Compiler - In this when you call abc () in that abc() compiler put a() and then statement after all this statment b() is called.
						abc() {
							a(); Before
							stmt;
							...
							...
							...
							b(); After
						}
		Policy 2 : Load Time Weaving - Special Class Loader .It will do the same thing but it is not recommended becuase client has it own class loader but we need special class loader.
		
		
		Policy 3 : RunTime Weaving - In this it is creating a wrapper object around by method. 
					here there are different wrapper object are created
						a();     Before
						abc();
						b();     After
		
==============================================================================================================================================================
									CREATING DYNAMIC WEB PROJECT USING SPRING
==============================================================================================================================================================
==> Project named : Spring100_MVCBasics

	1. Create new Dynamic Web project
	2. Create a Controller file
	3. Above Class add @Controller
	4. Create a method before that add annotation @RequestMapping("/homePage")
	5. Create jsp name as HomePage.
	6. Copy <servlet> and <servlet-mapping> from web.xml of MavenMvc010Basics and paste it on our web.xml
	7. Remove init-param tag from web-xml.
	8. Copy context-servlet.xml from MavenMvc010Basics and paste it besides WEB-INF
	9. Copy the name of servlet-name i.e. appServlet . 


==============================================================================================================================================================
										HOW TO CREATE MULTI - CONTEXT
==============================================================================================================================================================
		--> For this we have to create one instance of ApplicationContext and two instance of WebContext 
		--> ApplicationContext will be Parent and two WebContext would be Child 
		
IMPORTANT NOTE : 
				 Whenever you deployed it will first look for web.xml after this init method called , it will look for the configuration file (appServlet-servlet.xml).
				 Then it will look for the Default handler mapper or handler mapper  is mentioned now it is mentioned default handler mapper even it is looking for default View Resolver.
				 Dispatcher servlet configuration goes in web.xml, Every server refers to Dispatcher Servlet and dispatcher servlet refers to this configuration file.
				 Here Spring MVC is giving you ready front Controller, you have simply to write different controlling methods.
				 
		==>		What is responsibility of Controlling Methods -> Controlling methods is suppose to return View name 
				What parameter -> No Request parameter No Response parameter.
					If No Request parameter No Response parameter then how will do getParamter() and getSession(). For this we have to give Session parameter in the method it will
					return the Session. We just simply have to give paramters.		
			
			--> Interaction with service layer with @Autowired Annotation can be done.
			--> Data Transformation.
	
	PROJECT : -> Spring110_MVCBasics
	==> How to create Alias jsp name simply in method of controller remove .jsp and in appletServlet-servlet uncomment beans 
		In that prefix : -->  value="/WEB-INF/jsps/"
		In suffix : -->	.jsp
		-Here instead of switch case we have to  write different method for different jsp and it operations it is called as @RequestMapping
		-- After that we have to set the cannonical name appletServer-servlet.xml with springWeb.xml for this we have to set in web.xml we have set the tag as init-param
			and in this tag we have to set name and value name must be fixed as DispatcherServlet read that name "contextConfigLocation"
			And value you can give anything now i am giving the path /WEB-INF/springWeb.xml and change the appletServer-servlet.xml 
			
		-- Here for ApplicationContext as a Parent Context . This is called as Parent context. This is going to designed as all the layer for CORE layer
			we have add Listener tag as mentioned below in web.xml

					<listener>
						<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
					</listener>
			
			
				CHILD CONTEXT: BY DEFUALT IS appletServer-servlet which i have change to springWeb.xml
					<servlet>
						<servlet-name>appServlet</servlet-name>
						<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
						<init-param>
							<param-name>contextConfigLocation</param-name>
							<param-value>/WEB-INF/springWeb.xml</param-value>
						</init-param>		
						<load-on-startup>1</load-on-startup>
					</servlet>
					
			Once you have added this now change the context.xml to ApplicationContext.xml 
			
			
			If you have to change the name of ApplicationContext.xml
					 
					<context-param>
						<param-name>contextConfigLocation</param-name>
						<param-value>/WEB-INF/spring.xml</param-value>
					</context-param>
			
			Execute it you can get the output.
			
			
			Now we create two frontcontroller 
					-- fcForHR
					-- fcForFin
			
			
==============================================================================================================================================================		
			
		==> 
		
		
	If you want to welcome page as a homePage in web.xml you have to mentioned home.do [ <welcome-file>homePage.do</welcome-file> ]
	
==============================================================================================================================================================
		IMPORTANT NOTES
==============================================================================================================================================================	

	==> Configuration file	
		Context loader Listener [Spring.xml]
			we declare 
				-> dao
				-> service
				-> dataSource
				
	==> Dispatcher Servlets [SpringWebFIN]  AND [SpringWebHR]	
			We declare	
				->There would be different controllers for the above dispatcher servlets


==============================================================================================================================================================
			ONE TO ONE MAPPING AND ONE TO MANY MAPPING 
==============================================================================================================================================================
	PROJECT NAME : Spring130_MVC_JPA
	For this we have Employe table and department table .
		1. Emp Entity Class
		2. Dept Entity Class
		3. In Employee class, we have to create 
				private Dept dept  // This is Association
		4. Now pull getter setter methods for dept	
				on dept getter method 
					// for One Employee One Departmetn thats why one to one
						@OneToOne
						@JoinColumn(name="DEPT_NO")
						public Dept getDept() {
							return dept;
						}
		5. Run it you will get an error.
		6. So for this you have remmove the members dept_no from employee entity.
		7. In EmpDetails jsp you have to add getEmpDetails.dept.deptNm.
	
	ONE TO MANY :DEPT CLASS 


==============================================================================================================================================================
			==> PROJECTS OVERVIEW OF SPRING 
==============================================================================================================================================================
	
	--> Spring050_aop  : AOP Concept
	--> Spring100_MVCBasics : simple projct with appServlet-servlet concept
	--> Spring110_MVCBasics : DATASOURCE CONCEPT WHICH exclude appServlet-servlet concept and instead of that spring.xml comes in pictures multi -context
	--> Spring120_MVC_JPA 	: JPA CONCEPT INSTEAD OF DATASOURCE
	--> Spring130_MVC_JPA 	: JPA CONCEPT WITH ONE TO ONE AND ONE TO MANY MAPPING RELATIONSHIP

==============================================================================================================================================================



==============================================================================================================================================================
			HOW TO PUT CLASS WHICH SHOWS IN JSPS
==============================================================================================================================================================
	1. For showing one object -- in create one method we have ato create one object of class aand model.addAttribute("command",emp);
	2. For showing from two tables we have done association we used onetomany relationship and we can create it and show it 
	3. For Non Associated tables we have to create one class wchich can used one class and another class [product + employee] .
	