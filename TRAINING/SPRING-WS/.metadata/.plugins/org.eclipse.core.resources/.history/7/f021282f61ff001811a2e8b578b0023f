package com.jp.complaints.controllers;

import java.util.Set;

import javax.validation.ConstraintViolation;
import javax.validation.Validation;
import javax.validation.Validator;
import javax.validation.ValidatorFactory;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;

import com.jp.complaints.entities.Complaint;
import com.jp.complaints.entities.Employee;
import com.jp.complaints.services.ServiceComplaintRequest;

public class ComplaintPageController {
	
	@Autowired
	@Qualifier("complaintService")
	private ServiceComplaintRequest compService;
	
	@Autowired
	private Validator validator;
	
	@InitBinder
	private void validatorBinder() {
		ValidatorFactory validatorFactory = Validation.buildDefaultValidatorFactory();
        validator = validatorFactory.getValidator();      
        System.out.println("Validator is set."+validator.hashCode());
	}
	
	
	@RequestMapping("homePage.cr")
	public String getRegistrationForm(Model model) {	
	Complaint compt = new Complaint();
	model.addAttribute("command",compt);
	return "HomePage";		
	
	}
	
	@RequestMapping("submitRegistrationData.cr")
	public String submitRegistrationData(@ModelAttribute("command") Complaint compt,  BindingResult result, Model model) {
		System.out.println(compt);		
		// We have apply Validation here		
		Set<ConstraintViolation<Complaint>> violations = validator.validate(compt);
		
		for (ConstraintViolation<Complaint> violation : violations)
        {
            String propertyPath = violation.getPropertyPath().toString();
            String message = violation.getMessage();
            // Add JSR-303 errors to BindingResult. This allows Spring to display them in view via a FieldError
            FieldError error = new FieldError("command",propertyPath,
                    "Invalid "+ propertyPath + "(" + message + ")");
            result.addError(error);
        }		
		
    	if (result.hasErrors()) {
    		model.addAttribute("msg", "Error in entry.");    		
            return "EntryPage";
        } else {
        	try {
    			empService.addNewEmployee(emp);
    			return "SaveSuccess";
    		} catch (HrException e) {
    			model.addAttribute("msg", "Insert failed." + e.getMessage());
    			return "EntryPage";
    		}
        }
		
	}
	
}
